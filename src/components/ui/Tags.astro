---
import { Image } from 'astro:assets';
import { SKILL_ICON_BASE_URL } from '@src/consts';

export interface Props {
	tags?: string[];
	tagsImg?: string[];
}

const { tags } = Astro.props;
---

<script>
	// Update icons when theme changes
	function updateIconsTheme() {
		const isDark = document.documentElement.classList.contains('dark');
		const icons = document.querySelectorAll('.skill-icon') as NodeListOf<HTMLImageElement>;
		icons.forEach((icon) => {
			if (icon.src) {
				const url = new URL(icon.src);
				url.searchParams.set('theme', isDark ? 'dark' : 'light');
				icon.src = url.toString();
			}
		});
	}

	// Watch for theme changes using a MutationObserver
	const observer = new MutationObserver((mutations) => {
		mutations.forEach((mutation) => {
			if (mutation.attributeName === 'class') {
				updateIconsTheme();
			}
		});
	});

	// Start observing theme changes
	window.addEventListener('load', () => {
		updateIconsTheme(); // Initial update
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ['class'],
		});
	});

	// Cleanup observer when component is destroyed
	document.addEventListener('astro:before-swap', () => observer.disconnect());
</script>

{
	tags && (
		<div class="flex flex-row flex-wrap justify-start gap-2">
			{tags?.map((tag) => {
				const iconPath = tag.toLowerCase();
				const skillURL = `${SKILL_ICON_BASE_URL}${iconPath}`;
				return (
					<Image
						src={skillURL}
						class="skill-icon aspect-square opacity-100 duration-75 hover:scale-105 hover:transform hover:opacity-50"
						alt={`${tag} logo`}
						loading="eager"
						width={25}
						height={25}
						title={tag}
						format="svg"
					/>
				);
			})}
		</div>
	)
}
