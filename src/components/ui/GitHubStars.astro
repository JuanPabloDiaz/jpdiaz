---
import Star from '@components/icons/Star.astro';
import StarHover from '@components/icons/StarHover.astro';

// Define the component's props
interface Props {
	github_url: string;
}

const { github_url } = Astro.props;

// Function to extract owner and repo name from GitHub URL
const getRepoDetails = (url: string) => {
	const regex = /github\.com\/([^\/]+)\/([^\/]+)/;
	const matches = url.match(regex);
	return matches ? { owner: matches[1], repo: matches[2] } : null;
};

const repoDetails = getRepoDetails(github_url);

// If repoDetails is null, do not proceed further
if (!repoDetails) {
	return undefined;
}

// Initialize starsCount with a default message
let starsCount = 'Loading...';

// Function to fetch stars count
const fetchStarsCount = async (owner: string, repo: string) => {
	const githubToken = import.meta.env.GITHUB_TOKEN;
	const url = `https://api.github.com/repos/${owner}/${repo}`;

	try {
		const response = await fetch(url, {
			headers: {
				Authorization: `token ${githubToken}`,
			},
		});
		if (!response.ok) {
			throw new Error(`GitHub API responded with status code: ${response.status}`);
		}
		const data = await response.json();
		return data.stargazers_count.toString();
	} catch (error) {
		console.error('Error fetching stars count:', error);
		return 'Error';
	}
};

// Fetch stars count if repoDetails is valid
if (repoDetails) {
	starsCount = await fetchStarsCount(repoDetails.owner, repoDetails.repo);
}
const formattedStarsCount =
	starsCount > 1000
		? `${(starsCount / 1000).toFixed(1).replace(/\.0$/, '')}K`
		: starsCount.toString();

let forkUrl = '';

if (repoDetails) {
	forkUrl = `https://github.com/${repoDetails.owner}/${repoDetails.repo}/fork`;
	starsCount = await fetchStarsCount(repoDetails.owner, repoDetails.repo);
}
---

<div class="group flex flex-wrap justify-end gap-2">
	<a
		href={forkUrl}
		target="_blank"
		aria-label="GitHub Stars for this repository"
		rel="noopener noreferrer"
		class="icon-container flex items-center rounded-lg px-2 py-1 text-xs text-black shadow-sm shadow-orange lg:py-1"
	>
		<StarHover class="mr-1 h-4 w-4 group-hover:hidden" />
		<Star class="mr-1 hidden h-4 w-4 group-hover:block" />
		<span>{formattedStarsCount}</span>
	</a>
</div>
