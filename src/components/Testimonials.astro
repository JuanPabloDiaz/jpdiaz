---
import {
	getGitHubIssueComments,
	getGitHubPullRequestReviewComments,
	getGitHubDiscussionComments,
	GitHubIssueComment,
} from '@utils/github';
import TestimonialCard from '@components/ui/TestimonialCard.astro';
import LinkedInTestimonialCard from '@components/ui/LinkedInTestimonialCard.astro';
import { parseGitHubUrl } from '@utils/urlParser';
import SubTitle from '@components/ui/SubTitle.astro';

import testimonialsData from '@src/data/testimonials.json';
import linkedinTestimonialsData from '@src/data/linkedin_testimonials.json';

interface Props {
	title?: string;
}

// Initialize arrays to store comments and errors
let allComments: GitHubIssueComment[] = [];
let errors: string[] = [];

// Flag to track if we should use fallback testimonials
let useFallbackTestimonials = false;

// Check if we're in production mode
// In production, don't make API calls and use pre-defined testimonials from testimonialsData
const isProd = import.meta.env.PROD;
let shouldUseFallbackTestimonials = isProd; // Always use fallbacks in production

if (!isProd) {
	// Only make API calls in development mode
	try {
		console.log('Running in development mode - fetching testimonials via API');

		// Process each repository group from the JSON file
		for (const repoGroup of testimonialsData.repositories) {
			try {
				console.log(`Processing testimonials for repo: ${repoGroup.name}`);

				// Process each testimonial in this repository group
				for (const testimonial of repoGroup.testimonials) {
					console.log(`Processing testimonial source: ${testimonial.url}`);

					// Parse the GitHub URL to extract owner, repo, number, and type
					const parsedUrlData = parseGitHubUrl(testimonial.url);
					console.log('Parsed URL data:', parsedUrlData);

					// Skip invalid URLs
					if (
						parsedUrlData.type === 'unknown' ||
						!parsedUrlData.owner ||
						!parsedUrlData.repo ||
						!parsedUrlData.number
					) {
						const errorMsg = `Invalid GitHub URL format: ${testimonial.url}`;
						console.error(errorMsg);
						errors.push(errorMsg);
						continue;
					}

					const { owner, repo, number, type: commentType, commentId } = parsedUrlData;
					let sourceComments: GitHubIssueComment[] | null = null;

					// Fetch comments based on the URL type
					console.log(`Fetching comments for ${commentType} from ${owner}/${repo}#${number}`);

					switch (commentType) {
						case 'issue':
							sourceComments = await getGitHubIssueComments(
								`https://github.com/${owner}/${repo}`,
								number as number
							);
							break;
						case 'pr_general_comment':
							sourceComments = await getGitHubIssueComments(
								`https://github.com/${owner}/${repo}`,
								number as number
							);
							break;
						case 'pr_review_comment':
							sourceComments = await getGitHubPullRequestReviewComments(
								owner as string,
								repo as string,
								number as number,
								commentId
							);
							break;
						case 'discussion':
							sourceComments = await getGitHubDiscussionComments(
								owner as string,
								repo as string,
								number as number
							);
							break;
						default:
							const errorMsg = `Unsupported comment type: ${commentType} for URL: ${testimonial.url}`;
							console.error(errorMsg);
							errors.push(errorMsg);
							continue;
					}

					console.log(`Fetched comments:`, sourceComments ? sourceComments.length : 0);

					// Handle case when no comments are found
					if (!sourceComments) {
						const errorMsg = `No comments found for: ${testimonial.url}`;
						console.error(errorMsg);
						errors.push(errorMsg);
						continue;
					}

					// If a specific comment ID is specified, filter for that comment
					if (commentId && sourceComments.length > 0) {
						const numericCommentId = parseInt(commentId, 10);
						console.log(`Filtering for comment ID: ${numericCommentId}`);

						if (!isNaN(numericCommentId)) {
							const filteredComments = sourceComments.filter((c) => c.id === numericCommentId);
							console.log(`Found ${filteredComments.length} comments with ID ${numericCommentId}`);

							if (filteredComments.length === 0) {
								const errorMsg = `Comment ID ${numericCommentId} not found in: ${testimonial.url}`;
								console.error(errorMsg);
								errors.push(errorMsg);
								continue;
							}
							sourceComments = filteredComments;
						} else {
							const errorMsg = `Invalid comment ID format: ${commentId} in URL: ${testimonial.url}`;
							console.error(errorMsg);
							errors.push(errorMsg);
							continue;
						}
					}

					// Add the valid comments to our collection
					console.log(`Adding ${sourceComments.length} comments to collection`);
					allComments = [...allComments, ...sourceComments];
				} // End of testimonial loop
			} catch (error) {
				console.error(`Error fetching testimonials from repo ${repoGroup.name}:`, error);
				errors.push(`Failed to load testimonials from repo: ${repoGroup.name}`);
			}
		}
	} catch (error) {
		console.error('Error in testimonial processing:', error);
		shouldUseFallbackTestimonials = true;
	}
} else {
	console.log('Running in production mode - using pre-defined testimonials');
	shouldUseFallbackTestimonials = true;
}

// Use pre-defined testimonials in production or if API calls failed
if (allComments.length === 0 || shouldUseFallbackTestimonials) {
	console.log('Using pre-defined testimonials from testimonials.json');
	useFallbackTestimonials = true;

	// Create a manual collection of testimonials based on the testimonials.json data
	const manualTestimonials: GitHubIssueComment[] = [];

	for (const repoGroup of testimonialsData.repositories) {
		const repoName = repoGroup.repo;
		const [owner, repo] = repoName ? repoName.split('/') : ['', ''];

		for (const testimonial of repoGroup.testimonials) {
			manualTestimonials.push({
				id: testimonial.url,
				node_id: '',
				user: {
					login: testimonial.author,
					avatar_url: `https://github.com/${testimonial.author}.png`, // GitHub avatar URL pattern
					id: 0,
					node_id: '',
					type: 'User',
				},
				created_at: testimonial.date,
				body: testimonial.text,
				html_url: testimonial.url,
				issue_url: testimonial.url,
				issue: {
					title: testimonial.text.substring(0, 50) + '...',
				},
				repository: {
					owner: owner,
					name: repo,
					full_name: repoName,
				},
			});
		}
	}

	allComments = manualTestimonials;
	console.log(`Created ${allComments.length} manual testimonials from testimonials.json`);
} else {
	console.log('Using testimonials fetched from GitHub API:', allComments.length);
}

// Ordenar los testimonios por fecha (m치s recientes primero)
allComments.sort((a, b) => {
	const dateA = new Date(a.created_at);
	const dateB = new Date(b.created_at);
	return dateB.getTime() - dateA.getTime(); // Orden descendente (m치s reciente primero)
});

console.log('Testimonios ordenados por fecha (m치s recientes primero)');

// Helper variables for the template
const hasComments = allComments.length > 0;
const hasErrors = errors.length > 0 && !useFallbackTestimonials; // Don't show errors if using fallbacks
---

<div class="h-10" id="testimonials"></div>

<section
	data-testid="testimonials"
	class="mb-10 flex flex-col items-center justify-center md:mb-0 md:h-auto"
>
	<div class="mb-10 flex w-full flex-col items-center justify-center lg:mb-0 lg:w-1/2">
		<SubTitle text="GitHub Testimonials" />
	</div>
	<p class="text-gray-500 text-center lg:w-1/2">
		Testimonials from the GitHub community on my open-source contributions.
	</p>
	<span class="bg-blue-600 dark:bg-blue-500 mt-2 h-1 w-20"></span>

	{
		hasErrors && !hasComments && (
			<div class="mb-8 max-w-2xl text-center">
				<p class="text-gray-600 dark:text-gray-400">Some testimonials couldn't be loaded:</p>
				<ul class="text-gray-600 dark:text-gray-400 mt-2 list-none">
					{errors.map((error) => (
						<li>{error}</li>
					))}
				</ul>
			</div>
		)
	}

	{
		!hasComments && !hasErrors && (
			<p class="text-gray-600 dark:text-gray-400 max-w-2xl text-center">
				No GitHub testimonials available at this time.
			</p>
		)
	}

	{
		hasComments && (
			<div class="container mx-auto px-4 py-4">
				<div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
					{allComments.map((comment) => (
						<TestimonialCard comment={comment} />
					))}
				</div>
			</div>
		)
	}

	{
		hasErrors && hasComments && (
			<div class="mt-6">
				<p class="text-gray-600 dark:text-gray-400 text-center text-sm">
					Note: Some testimonial sources couldn't be loaded.
				</p>
			</div>
		)
	}

	{/* Secci칩n de testimonios de LinkedIn */}
	<div class="mb-10 mt-20 flex w-full flex-col items-center justify-center lg:mb-0 lg:w-1/2">
		<SubTitle text="LinkedIn Testimonials" />
	</div>
	<p class="text-gray-500 text-center lg:w-1/2">
		Testimonials from LinkedIn connections and colleagues.
	</p>
	<span class="bg-blue-600 dark:bg-blue-500 mt-2 h-1 w-20"></span>

	{
		linkedinTestimonialsData.testimonials && linkedinTestimonialsData.testimonials.length > 0 ? (
			<div class="container mx-auto px-4 py-4">
				<div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
					{linkedinTestimonialsData.testimonials.map((testimonial) => (
						<LinkedInTestimonialCard testimonial={testimonial} />
					))}
				</div>
			</div>
		) : (
			<p class="text-gray-600 dark:text-gray-400 mt-4 max-w-2xl text-center">
				No LinkedIn testimonials available at this time.
			</p>
		)
	}
</section>
