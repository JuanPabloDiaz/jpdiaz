---
import {
	getGitHubIssueComments,
	getGitHubPullRequestReviewComments,
	getGitHubDiscussionComments,
} from '@utils/github';
import TestimonialCard from '@components/ui/TestimonialCard.astro';
import type { GitHubIssueComment } from '@utils/github';
import { parseGitHubUrl } from '@utils/urlParser';
import type { ParsedGitHubUrl } from '@utils/urlParser';

import testimonialsData from '@src/content/testimonials.json';

interface Props {
	title?: string;
}

const { title = 'What People Are Saying' } = Astro.props;

// Initialize arrays to store comments and errors
let allComments: GitHubIssueComment[] = [];
let errors: string[] = [];

// Debug: Check if GitHub token is available
const githubToken = import.meta.env.PUBLIC_GITHUB_TOKEN;
console.log('GitHub Token available:', !!githubToken);
console.log('Testimonials data:', testimonialsData);

// Flag to track if we should use fallback testimonials
let useFallbackTestimonials = false;

// Process each repository group from the JSON file
for (const repoGroup of testimonialsData.repositories) {
	try {
		console.log(`Processing testimonials for repo: ${repoGroup.name}`);

		// Process each testimonial in this repository group
		for (const testimonial of repoGroup.testimonials) {
			console.log(`Processing testimonial source: ${testimonial.url}`);

			// Parse the GitHub URL to extract owner, repo, number, and type
			const parsedUrlData = parseGitHubUrl(testimonial.url);
			console.log('Parsed URL data:', parsedUrlData);

			// Skip invalid URLs
			if (
				parsedUrlData.type === 'unknown' ||
				!parsedUrlData.owner ||
				!parsedUrlData.repo ||
				!parsedUrlData.number
			) {
				const errorMsg = `Invalid GitHub URL format: ${testimonial.url}`;
				console.error(errorMsg);
				errors.push(errorMsg);
				continue;
			}

			const { owner, repo, number, type: commentType, commentId } = parsedUrlData;
			let sourceComments: GitHubIssueComment[] | null = null;

			// Fetch comments based on the URL type
			console.log(`Fetching comments for ${commentType} from ${owner}/${repo}#${number}`);

			switch (commentType) {
				case 'issue':
					sourceComments = await getGitHubIssueComments(
						`https://github.com/${owner}/${repo}`,
						number as number
					);
					break;
				case 'pr_general_comment':
					sourceComments = await getGitHubIssueComments(
						`https://github.com/${owner}/${repo}`,
						number as number
					);
					break;
				case 'pr_review_comment':
					sourceComments = await getGitHubPullRequestReviewComments(
						owner as string,
						repo as string,
						number as number,
						commentId
					);
					break;
				case 'discussion':
					sourceComments = await getGitHubDiscussionComments(
						owner as string,
						repo as string,
						number as number
					);
					break;
				default:
					const errorMsg = `Unsupported comment type: ${commentType} for URL: ${testimonial.url}`;
					console.error(errorMsg);
					errors.push(errorMsg);
					continue;
			}

			console.log(`Fetched comments:`, sourceComments ? sourceComments.length : 0);

			// Handle case when no comments are found
			if (!sourceComments) {
				const errorMsg = `No comments found for: ${testimonial.url}`;
				console.error(errorMsg);
				errors.push(errorMsg);
				continue;
			}

			// If a specific comment ID is specified, filter for that comment
			if (commentId && sourceComments.length > 0) {
				const numericCommentId = parseInt(commentId, 10);
				console.log(`Filtering for comment ID: ${numericCommentId}`);

				if (!isNaN(numericCommentId)) {
					const filteredComments = sourceComments.filter((c) => c.id === numericCommentId);
					console.log(`Found ${filteredComments.length} comments with ID ${numericCommentId}`);

					if (filteredComments.length === 0) {
						const errorMsg = `Comment ID ${numericCommentId} not found in: ${testimonial.url}`;
						console.error(errorMsg);
						errors.push(errorMsg);
						continue;
					}
					sourceComments = filteredComments;
				} else {
					const errorMsg = `Invalid comment ID format: ${commentId} in URL: ${testimonial.url}`;
					console.error(errorMsg);
					errors.push(errorMsg);
					continue;
				}
			}

			// Add the valid comments to our collection
			console.log(`Adding ${sourceComments.length} comments to collection`);
			allComments = [...allComments, ...sourceComments];
		} // End of testimonial loop
	} catch (error) {
		console.error(`Error fetching testimonials from repo ${repoGroup.name}:`, error);
		errors.push(`Failed to load testimonials from repo: ${repoGroup.name}`);
	}
}

// Verificar si se obtuvieron comentarios de GitHub
if (allComments.length === 0) {
	console.log('No se encontraron testimonios de GitHub, usando testimonios de respaldo');
	useFallbackTestimonials = true;

	// Usar los testimonios de respaldo del archivo JSON
	if (testimonialsData.fallbackTestimonials && testimonialsData.fallbackTestimonials.length > 0) {
		allComments = testimonialsData.fallbackTestimonials as GitHubIssueComment[];
		console.log('Testimonios de respaldo cargados:', allComments.length);
	}
} else {
	console.log('Se encontraron testimonios de GitHub:', allComments.length);
}

// Ordenar los testimonios por fecha (más recientes primero)
allComments.sort((a, b) => {
	const dateA = new Date(a.created_at);
	const dateB = new Date(b.created_at);
	return dateB.getTime() - dateA.getTime(); // Orden descendente (más reciente primero)
});

console.log('Testimonios ordenados por fecha (más recientes primero)');

// Helper variables for the template
const hasComments = allComments.length > 0;
const hasErrors = errors.length > 0 && !useFallbackTestimonials; // Don't show errors if using fallbacks
---

<div class="h-10" id="testimonials"></div>

<section
	data-testid="testimonials"
	class="mb-10 flex flex-col items-center justify-center md:mb-0 md:h-auto"
>
	<div class="mb-8 flex flex-col items-center justify-center">
		<h2 class="text-gray-900 text-2xl font-bold dark:text-white md:text-4xl">{title}</h2>
		<span class="bg-blue-600 dark:bg-blue-500 mt-2 h-1 w-20"></span>
	</div>

	{
		hasErrors && !hasComments && (
			<div class="mb-8 max-w-2xl text-center">
				<p class="text-gray-600 dark:text-gray-400">Some testimonials couldn't be loaded:</p>
				<ul class="text-gray-600 dark:text-gray-400 mt-2 list-none">
					{errors.map((error) => (
						<li>{error}</li>
					))}
				</ul>
			</div>
		)
	}

	{
		!hasComments && !hasErrors && (
			<p class="text-gray-600 dark:text-gray-400 max-w-2xl text-center">
				No testimonials available at this time.
			</p>
		)
	}

	{
		hasComments && (
			<div class="container mx-auto px-4 py-4">
				<div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
					{allComments.map((comment) => (
						<TestimonialCard comment={comment} />
					))}
				</div>
			</div>
		)
	}

	{
		hasErrors && hasComments && (
			<div class="mt-6">
				<p class="text-gray-600 dark:text-gray-400 text-center text-sm">
					Note: Some testimonial sources couldn't be loaded.
				</p>
			</div>
		)
	}
</section>
