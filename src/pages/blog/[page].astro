---
import Layout from '@layouts/Layout.astro';
import Navbar from '@components/Navbar.astro';
import LangSwitch from '@components/ui/LangSwitch.astro';
import { getSortedPosts } from '@utils/collectionUtils';
import { site } from '@src/consts';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import { getCollection } from 'astro:content';
import { formatDate } from '@utils/formatDate';
import Pagination from '@components/ui/Pagination.astro';
import SubTitle from '@components/ui/SubTitle.astro';
import BlogSearch from '@components/BlogSearch.astro';

// Generate pages for pagination
export async function getStaticPaths({ paginate }: { paginate: any }) {
	const lang = 'en';
	const allPosts = await getCollection('blog');
	const posts = getSortedPosts(allPosts, lang);

	// Generate all pages including page 1
	return paginate(posts, { pageSize: 6 });
}

const { page } = Astro.props;
const { currentPage, data: posts, lastPage } = page;

// Ensure posts is treated as an array
const blogPosts = Array.isArray(posts) ? posts : [];

// Redirigir /blog/1 a /blog para evitar contenido duplicado
if (currentPage === 1) {
	return Astro.redirect('/blog');
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const currentPathname = Astro.url.pathname;

const blogMenu = [
	{ title: 'Home', path: '/' },
	{ title: 'Blog', path: '/blog' },
];
---

<Layout metaTitle={`Blog | Page ${currentPage} | ${site.author}`} includeSidebar={false}>
	<Navbar menu={blogMenu} button="Resume" />
	<main
		class="mb-10 flex flex-col items-center justify-center text-black dark:text-white md:mb-0 md:h-screen lg:h-auto"
	>
		<SubTitle text="Blog" />
		<div class="mb-8 flex w-full max-w-3xl flex-col items-center">
			<LangSwitch currentLang={lang} currentPathname={currentPathname} />
		</div>
		<p class="text-gray-600 dark:text-gray-300 mb-8 max-w-2xl text-center">
			Welcome to my blog! Here youâ€™ll find articles about web development, technology, and more.
		</p>
		<BlogSearch currentLang={lang} />
		<div class="grid grid-cols-1 gap-2 md:grid-cols-2 md:gap-4">
			{
				blogPosts.map((post: any) => (
					<article class="group relative rounded-lg border p-6" data-lang={post.data.lang || lang}>
						<h2 class="mb-2 text-2xl font-semibold text-black dark:text-white">
							<a href={`/blog/${post.slug}`} class="hover:text-blue-600 dark:hover:text-blue-400">
								{post.data.title}
							</a>
						</h2>
						<p class="text-gray-600 dark:text-gray-300 mb-4">{post.data.description}</p>
						<div class="flex flex-wrap items-center gap-4 text-sm">
							<time
								datetime={post.data.pubDate.toISOString()}
								class="text-gray-600 dark:text-gray-300"
							>
								{t('blog.publishedOn')} {formatDate(post.data.pubDate, lang)}
							</time>
							<div class="flex flex-wrap gap-2">
								{post.data.tags.map((tag: string) => (
									<span class="bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 rounded-full px-3 py-1 text-sm">
										#{tag}
									</span>
								))}
							</div>
						</div>
						<a
							href={`/blog/${post.slug}`}
							class="dark:ring-offset-zinc-900 absolute inset-0 rounded-lg ring-orange ring-offset-2 ring-offset-orange transition-all duration-300 ease-in-out hover:ring-2"
							aria-label={`Read ${post.data.title}`}
						/>
					</article>
				))
			}
		</div>

		<Pagination currentPage={currentPage} totalPages={lastPage} baseUrl="/blog/" />
	</main>
</Layout>