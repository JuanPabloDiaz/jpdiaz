---
import Layout from './Layout.astro';
import { ui } from '@i18n/ui';
import Navbar from '@components/Navbar.astro';
import { site } from '@src/consts';
import { Image } from 'astro:assets';

interface Props {
	title: string;
	description: string;
	pubDate: Date;
	updatedDate?: Date;
	lang: 'en' | 'es';
	tags?: string[];
	image?: string;
	canonicalURL?: string;
	draft?: boolean;
	mathjax?: boolean;
	mermaid?: boolean;
}

const {
	title = 'No title',
	description = '',
	pubDate = new Date(),
	updatedDate,
	lang = 'en',
	tags = [],
	image,
	canonicalURL,
	draft = false,
	mathjax = false,
	mermaid = false,
} = Astro.props ?? {};
const formattedPubDate = pubDate.toLocaleDateString(lang === 'es' ? 'es-ES' : ('en-US' as const), {
	year: 'numeric',
	month: 'long',
	day: 'numeric',
});
const formattedUpdatedDate = updatedDate?.toLocaleDateString(
	lang === 'es' ? 'es-ES' : ('en-US' as const),
	{
		year: 'numeric',
		month: 'long',
		day: 'numeric',
	}
);
---

<Layout
	metaTitle={`${title} - ${site.author} | Blog`}
	metaDescription={description}
	pageKeywords={tags && tags.length > 0
		? [...tags, 'Juan Diaz blog', 'web development', 'programming']
		: ['Juan Diaz blog', 'web development', 'programming', 'tutorial']}
	ogImage={image || '/images/desktop-v2.png'}
	includeSidebar={false}
>
	{
		mathjax && (
			<script
				type="text/javascript"
				id="MathJax-script"
				async
				src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
			/>
		)
	}
	{
		mermaid && (
			<script
				type="module"
				async
				src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs"
			/>
		)
	}
	<Navbar
		menu={[
			{ title: lang === 'es' ? 'Inicio' : 'Home', path: lang === 'es' ? '/es' : '/' },
			{ title: 'Blog', path: lang === 'es' ? '/es/blog' : '/blog' },
		]}
		button="Resume"
	/>
	<article class="mx-auto max-w-3xl px-4 py-8 text-black dark:text-white">
		{
			image && (
				<div class="mb-8 flex justify-center">
					<Image
						src={image}
						alt={title}
						width={1200}
						height={675}
						class="dark:shadow-zinc-800 max-h-[400px] w-full max-w-2xl rounded-lg object-contain"
						data-fancybox="hero-image"
						data-caption={title}
						loading="lazy"
						decoding="async"
						quality={85}
					/>
				</div>
			)
		}
		<h1 class="mb-4 text-4xl font-bold text-black dark:text-white">{title}</h1>
		<div class="text-gray-600 dark:text-gray-300 mb-8 flex flex-wrap items-center gap-4 text-sm">
			<time datetime={pubDate.toISOString()}>
				{ui[lang]['blog.publishedOn']}
				{formattedPubDate}
			</time>
			{
				updatedDate && (
					<time datetime={updatedDate.toISOString()}>
						• {ui[lang]['blog.updatedOn']} {formattedUpdatedDate}
					</time>
				)
			}
		</div>
		{
			Array.isArray(tags) && tags.length > 0 && (
				<div class="mb-8">
					{tags.map((tag) => (
						<span class="bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 mr-2 inline-block rounded-full px-3 py-1 text-sm">
							#{tag}
						</span>
					))}
				</div>
			)
		}
		<div class="prose-black prose max-w-none dark:prose-invert">
			<slot />
		</div>
	</article>
</Layout>

<script>
	import { Fancybox } from '@fancyapps/ui';
	import '@fancyapps/ui/dist/fancybox/fancybox.css';

	Fancybox.bind('[data-fancybox]', {
		// Tus opciones personalizadas de Fancybox aquí, si las necesitas
		// Por ejemplo:
		// Toolbar: {
		//   display: {
		//     left: ["infobar"],
		//     middle: [],
		//     right: ["close"],
		//   },
		// },
	});

	const markdownBody = document.querySelector('.markdown-body');

	if (markdownBody) {
		// Lazy loading y Fancybox para imágenes dentro del contenido Markdown
		const images = markdownBody.querySelectorAll('img');
		const imageObserverCallback = (entries, observer) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					const image = entry.target;
					const data_src = image.getAttribute('data-src');
					const data_alt = image.getAttribute('data-alt');

					image.setAttribute('data-fancybox', 'gallery');
					if (!image.hasAttribute('data-caption') && image.alt) {
						image.setAttribute('data-caption', image.alt);
					}

					if (data_src) {
						image.setAttribute('src', data_src);
						image.removeAttribute('data-src');
					}
					if (data_alt) {
						// Si estás usando data-alt para el texto alternativo final
						image.setAttribute('alt', data_alt);
						image.removeAttribute('data-alt');
					}
					observer.unobserve(image);
				}
			});
		};

		const imageObserver = new IntersectionObserver(imageObserverCallback);
		images.forEach((image) => {
			if (image.hasAttribute('data-src') || image.hasAttribute('src')) {
				imageObserver.observe(image);
			} else {
				image.setAttribute('data-fancybox', 'gallery');
				if (!image.hasAttribute('data-caption') && image.alt) {
					image.setAttribute('data-caption', image.alt);
				}
			}
		});

		// Modificar enlaces externos para que se abran en una nueva pestaña
		const links = markdownBody.querySelectorAll('a');
		for (const link of links) {
			const linkAttributes = link.getAttributeNames();
			if (
				!linkAttributes.includes('data-footnote-backref') &&
				!linkAttributes.includes('data-footnote-ref') &&
				link.hostname !== window.location.hostname &&
				link.href
			) {
				link.setAttribute('target', '_blank');
				link.setAttribute('rel', 'noopener noreferrer nofollow');
			}
		}
	}
</script>
