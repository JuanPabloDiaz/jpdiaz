---
import Layout from './Layout.astro';
import { ui } from '@i18n/ui';
import Navbar from '@components/Navbar.astro';
import { site } from '@src/consts';
import { Image } from 'astro:assets';

interface Props {
	title: string;
	description: string;
	pubDate: Date;
	updatedDate?: Date;
	lang: 'en' | 'es';
	tags: string[];
	image?: string;
	canonicalURL?: string;
	draft?: boolean;
	mathjax?: boolean;
	mermaid?: boolean;
}

const {
	title,
	description,
	pubDate,
	updatedDate,
	lang,
	tags,
	image,
	canonicalURL,
	draft,
	mathjax,
	mermaid,
} = Astro.props;
const formattedPubDate = pubDate.toLocaleDateString(lang === 'es' ? 'es-ES' : ('en-US' as const), {
	year: 'numeric',
	month: 'long',
	day: 'numeric',
});
const formattedUpdatedDate = updatedDate?.toLocaleDateString(
	lang === 'es' ? 'es-ES' : ('en-US' as const),
	{
		year: 'numeric',
		month: 'long',
		day: 'numeric',
	}
);
---

<Layout metaTitle={`${title} - ${site.author} | Blog`} includeSidebar={false}>
	{
		mathjax && (
			<script
				type="text/javascript"
				id="MathJax-script"
				async
				src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
			/>
		)
	}
	{
		mermaid && (
			<script
				type="module"
				async
				src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs"
			/>
		)
	}
	<Navbar
		menu={[
			{ title: lang === 'es' ? 'Inicio' : 'Home', path: lang === 'es' ? '/es' : '/' },
			{ title: 'Blog', path: lang === 'es' ? '/es/blog' : '/blog' },
		]}
		button="Resume"
	/>
	<article
		class="prose prose-black dark:prose-invert mx-auto max-w-3xl px-4 py-8 text-black dark:text-white"
	>
		{
			image && (
				<div class="mb-8 flex justify-center">
					<Image
						src={image}
						alt={title}
						width={1200}
						height={675}
						class="dark:shadow-zinc-800 max-h-[400px] w-full max-w-2xl rounded-lg object-contain"
					/>
				</div>
			)
		}
		<h1 class="mb-4 text-4xl font-bold text-black dark:text-white">{title}</h1>
		<div class="text-gray-600 dark:text-gray-300 mb-8 flex flex-wrap items-center gap-4 text-sm">
			<time datetime={pubDate.toISOString()}>
				{ui[lang]['blog.publishedOn']}
				{formattedPubDate}
			</time>
			{
				updatedDate && (
					<time datetime={updatedDate.toISOString()}>
						â€¢ {ui[lang]['blog.updatedOn']} {formattedUpdatedDate}
					</time>
				)
			}
		</div>
		<div class="mb-8">
			{
				tags.map((tag) => (
					<span class="bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 mr-2 inline-block rounded-full px-3 py-1 text-sm">
						#{tag}
					</span>
				))
			}
		</div>
		<div class="prose prose-black dark:prose-invert max-w-none">
			<slot />
		</div>
	</article>
</Layout>
